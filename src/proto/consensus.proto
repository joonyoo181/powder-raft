// Copyright (c) Shubham Mishra. All rights reserved.
// Licensed under the MIT License.

syntax = "proto3";

package proto.consensus;
import "execution.proto";

message ProtoNameWithSignature {
    string name = 1;
    bytes sig = 2;
}
message ProtoQuorumCertificate {
    bytes digest = 1;                        // Hash of certifying block
    uint64 n = 2;                            // Sequence number of certifying block
    repeated ProtoNameWithSignature sig = 3; // signer node --> Signature mapping;
                                             // but represented as array of tuples, so that protobuf doesn't reorder them
    uint64 view = 4;
}

// Empty type
message DefferedSignature { }

message ProtoViewChange {
    uint64 view = 1;
    uint64 config_num = 2;
    ProtoFork fork = 3;
    ProtoQuorumCertificate fork_last_qc = 4;
    uint64 fork_last_n = 5;
    bytes fork_sig = 6;

    // The signature needs to be agnostic of how much of the prefix is sent over.
    // Signature is over H(last_block) || H(fork_last_qc) || view || config_num || fork_last_n
}

message ProtoForkValidation {
    uint64 vc_view = 1;
    uint64 vc_config_num = 2;
  
    repeated bytes block_hashes = 3;
    uint64 fork_last_n = 4;
    ProtoQuorumCertificate fork_last_qc = 5;
    uint64 fork_last_view = 6;
    uint64 fork_last_config_num = 7;

    bytes vc_sig = 8;
    string sender = 9;

}

message ProtoTransactionList {
    repeated proto.execution.ProtoTransaction tx_list = 1;
}

message ProtoBlock {
    repeated proto.execution.ProtoTransaction tx_list = 1;
    // oneof tx {
        // ProtoTransactionList tx_list = 1;    // list of transactions
        // bytes tx_list_hash = 11;             // hash of the list of transactions  
    // }
    uint64 n = 2;                            // sequence number; u64 => don't worry about wrap-around.
    bytes parent = 3;                        // Hash chain parent
    uint64 view = 4;                         // proposer must be Leader(view)
    repeated ProtoQuorumCertificate qc = 5;  // List of quorum certificates attached to this block.
    repeated ProtoForkValidation fork_validation = 6; // List of view change messages. To check if this block is coming from a suitable fork.
    bool view_is_stable = 7;

    uint64 config_num = 8;
    oneof sig {
        DefferedSignature no_sig = 9;
        bytes proposer_sig = 10;
    }


}

message HalfSerializedBlock {
    uint64 n = 1;
    uint64 view = 2;
    bool view_is_stable = 3;
    uint64 config_num = 4;
    bytes serialized_body = 5;      // Format: signature || parent_hash || serialized body
}

// This is different from the logical view of a fork with fields `last` and `last_qc`.
message ProtoFork {
    repeated HalfSerializedBlock serialized_blocks = 1;
}


message ProtoAppendEntries {
    ProtoFork fork = 1;
    uint64 commit_index = 2;
    uint64 view = 4;
    bool view_is_stable = 5;
    uint64 config_num = 6;
    bool is_backfill_response = 7;
}

message ProtoSignatureArrayEntry {
    uint64 n = 1;                                // Sequence number
    bytes sig = 2;
}

message ProtoVote {
    repeated ProtoSignatureArrayEntry sig_array = 1;
    bytes fork_digest = 2;
    uint64 n = 3;
    uint64 view = 4;
    uint64 config_num = 5;
}

message ProtoRaftAppendEntries {
    uint64 term = 1;
    string leader_id = 2;
    uint64 prev_log_index = 3;
    uint64 prev_log_term = 4;
    repeated HalfSerializedBlock entries = 5;
    uint64 leader_commit = 6;
}

message ProtoRaftAppendEntriesReply {
    uint64 term = 1;
    bool success = 2;
}